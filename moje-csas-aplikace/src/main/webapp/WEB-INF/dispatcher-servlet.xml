<?xml version="1.0" encoding="UTF-8"?>
<!-- dispatcher-servlet.xml navazuje na konfiguraci web.xml, konfiguruje 
	a incializuje konkretni beany vzhledem k aplikaci -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context.xsd
   http://www.springframework.org/schema/mvc
   http://www.springframework.org/schema/mvc/spring-mvc.xsd   
   ">

	<!-- díky tomuhle ví aplikace kde jsou kontrolery a co ma skenovat -->
	<context:component-scan base-package="com.csas.mojeCsasAplikace.controller"></context:component-scan>
	<!-- rikam dispatcherovi at skenuje v BE vsechny potrebne beany -->
	<context:component-scan base-package="com.csas.moje_csas_aplikace_backend"></context:component-scan>

	<!-- rika Springu, ze ma vzit v potaz nize uveden soubory na zaklade Springove 
		tridy InternalResourceViewResolver -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">

		<!-- preklada logicke promenne na fyzicke -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp"></property>

	</bean>

	<!-- Loading static resources -->
	<mvc:annotation-driven />
	<mvc:resources location="/assets/" mapping="/resources/**" />

</beans>